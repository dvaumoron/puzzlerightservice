// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: right.proto

package puzzlerightservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RightClient is the client API for Right service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RightClient interface {
	AuthQuery(ctx context.Context, in *RightRequest, opts ...grpc.CallOption) (*RightResponse, error)
	ListRoles(ctx context.Context, in *ObjectIds, opts ...grpc.CallOption) (*Roles, error)
	RoleRight(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*Actions, error)
	UpdateUser(ctx context.Context, in *UserRight, opts ...grpc.CallOption) (*RightResponse, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*RightResponse, error)
}

type rightClient struct {
	cc grpc.ClientConnInterface
}

func NewRightClient(cc grpc.ClientConnInterface) RightClient {
	return &rightClient{cc}
}

func (c *rightClient) AuthQuery(ctx context.Context, in *RightRequest, opts ...grpc.CallOption) (*RightResponse, error) {
	out := new(RightResponse)
	err := c.cc.Invoke(ctx, "/puzzlerightservice.Right/AuthQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightClient) ListRoles(ctx context.Context, in *ObjectIds, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/puzzlerightservice.Right/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightClient) RoleRight(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*Actions, error) {
	out := new(Actions)
	err := c.cc.Invoke(ctx, "/puzzlerightservice.Right/RoleRight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightClient) UpdateUser(ctx context.Context, in *UserRight, opts ...grpc.CallOption) (*RightResponse, error) {
	out := new(RightResponse)
	err := c.cc.Invoke(ctx, "/puzzlerightservice.Right/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rightClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*RightResponse, error) {
	out := new(RightResponse)
	err := c.cc.Invoke(ctx, "/puzzlerightservice.Right/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RightServer is the server API for Right service.
// All implementations must embed UnimplementedRightServer
// for forward compatibility
type RightServer interface {
	AuthQuery(context.Context, *RightRequest) (*RightResponse, error)
	ListRoles(context.Context, *ObjectIds) (*Roles, error)
	RoleRight(context.Context, *RoleRequest) (*Actions, error)
	UpdateUser(context.Context, *UserRight) (*RightResponse, error)
	UpdateRole(context.Context, *Role) (*RightResponse, error)
	mustEmbedUnimplementedRightServer()
}

// UnimplementedRightServer must be embedded to have forward compatible implementations.
type UnimplementedRightServer struct {
}

func (UnimplementedRightServer) AuthQuery(context.Context, *RightRequest) (*RightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthQuery not implemented")
}
func (UnimplementedRightServer) ListRoles(context.Context, *ObjectIds) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedRightServer) RoleRight(context.Context, *RoleRequest) (*Actions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleRight not implemented")
}
func (UnimplementedRightServer) UpdateUser(context.Context, *UserRight) (*RightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedRightServer) UpdateRole(context.Context, *Role) (*RightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRightServer) mustEmbedUnimplementedRightServer() {}

// UnsafeRightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RightServer will
// result in compilation errors.
type UnsafeRightServer interface {
	mustEmbedUnimplementedRightServer()
}

func RegisterRightServer(s grpc.ServiceRegistrar, srv RightServer) {
	s.RegisterService(&Right_ServiceDesc, srv)
}

func _Right_AuthQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightServer).AuthQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzlerightservice.Right/AuthQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightServer).AuthQuery(ctx, req.(*RightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Right_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzlerightservice.Right/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightServer).ListRoles(ctx, req.(*ObjectIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Right_RoleRight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightServer).RoleRight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzlerightservice.Right/RoleRight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightServer).RoleRight(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Right_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzlerightservice.Right/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightServer).UpdateUser(ctx, req.(*UserRight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Right_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RightServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzlerightservice.Right/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RightServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

// Right_ServiceDesc is the grpc.ServiceDesc for Right service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Right_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "puzzlerightservice.Right",
	HandlerType: (*RightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthQuery",
			Handler:    _Right_AuthQuery_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Right_ListRoles_Handler,
		},
		{
			MethodName: "RoleRight",
			Handler:    _Right_RoleRight_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Right_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Right_UpdateRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "right.proto",
}
